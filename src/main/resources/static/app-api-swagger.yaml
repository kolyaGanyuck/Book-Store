openapi: 3.0.3
info:
  title: Book Service
  description: Book Service
  version: 1.0.0
servers:
  - url: 'http://localhost:8081'
    description: Dev Server
paths:

  /books/catalogue:
    get:
      summary: Catalogue
      description: Displays catalogue of books
      tags:
        - Book Controller
      operationId: getAllBooks
      responses:
        '200':
          description: Successful, get list of books
            text/html
        default:
          description: Error

  /books/new:
    get:
      summary: Form for new book
      description: Displays form for new book
      tags:
        - Book Controller
      operationId: getForm
      responses:
        200:
          description: Ok
        default:
          description: Error

    post:
      summary: Save book
      description: Save new book to db
      tags:
        - Book Controller
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The PDF file containing the book and cover.
                book:
                  $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Successful, book has been added, redirect to catalogue
        default:
          description: Error, user should be authenticated

  /books/book/{id}:
    get:
      summary: Book by id
      description: Get book by id
      tags:
        - Book Controller
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the book to retrieve
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful, book has been found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: ID of the book
                  title:
                    type: string
                    description: Title of the book
                  titleForDisplay:
                    type: string
                    description: Displayable title
                  genre:
                    type: string
                    description: Genre of the book
                  author:
                    type: string
                    description: Author of the book
                  year:
                    type: integer
                    description: Publication year of the book
                  imageCover:
                    type: string
                    description: URL for the cover image
                  rating:
                    type: integer
                    description: Rating of the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "errors.book.not_found"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /books/read/{id}:
    get:
      summary: Read book by ID
      description: Read the text of the book and paginate it by page number
      tags:
        - Book Controller
      operationId: readBook
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to read
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          required: false
          description: The page number to retrieve (defaults to 1)
          schema:
            type: integer
            format: int32
            default: 1
      responses:
        '200':
          description: Successful operation, returns the content of the specified page of the book
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookTitle:
                    type: string
                    description: Title of the book
                  currentPage:
                    type: integer
                    description: Current page number
                  totalPages:
                    type: integer
                    description: Total number of pages
                  bookId:
                    type: integer
                    format: int64
                    description: ID of the book
                  currentPageText:
                    type: string
                    description: Text content of the current page
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "errors.book.not_found"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /books/search/:
    get:
      summary: Search for books by title
      description: Find books whose title contains the search term (case-insensitive)
      tags:
        - Book Controller
      operationId: findBooks
      parameters:
        - name: search
          in: query
          required: true
          description: The title (or part of the title) of the book to search for
          schema:
            type: string
      responses:
        '200':
          description: A list of books matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: ID of the book
                    title:
                      type: string
                      description: Title of the book
                    genre:
                      type: string
                      description: Genre of the book
                    author:
                      type: string
                      description: Author of the book
                    year:
                      type: integer
                      description: Publication year of the book
                    imageCover:
                      type: string
                      description: URL to the image cover of the book
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /books/books-by-genre:
    post:
      summary: Get books by genre
      description: Find all books in the specified genre
      tags:
        - Book Controller
      operationId: booksByGenre
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                genre:
                  type: string
                  description: The genre to search for
      responses:
        '200':
          description: A list of books in the specified genre
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      description: ID of the book
                    title:
                      type: string
                      description: Title of the book
                    genre:
                      type: string
                      description: Genre of the book
                    author:
                      type: string
                      description: Author of the book
                    year:
                      type: integer
                      description: Publication year of the book
                    imageCover:
                      type: string
                      description: URL to the image cover of the book
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /user/create:
    get:
      summary: Registration form
      description: Return registration form for user
      tags:
        - User Controller
      operationId: getForm
      responses:
        200:
          description: HTML page with the form for user creation
          content:
            text/html:
              schema:
                type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
    post:
      summary: Create a new user
      description: This endpoint allows you to create a new user by uploading a file (e.g., profile picture) and providing user details.
      tags:
        - User Controller
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload (e.g., profile image for the user)
                user:
                  $ref: '#/components/schemas/User'
      responses:
        '302':
          description: Redirect to book catalogue on successful user creation
        '200':
          description: Returns the form again if the user already exists, with the username in the response.
          content:
            text/html:
              schema:
                type: string
        default:
          description: Unexpected error or internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message
  /user/profile/{id}:
    get:
      summary: Get User Profile
      description: Retrieve the user profile by user ID.
      tags:
        - User Controller
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with user profile.
          content:
            text/html:
              schema:
                type: string
        '302':
          description: Redirect to error page.

  /user/{activationCode}:
    get:
      summary: Activate User Profile
      description: Activate the user profile using the activation code.
      tags:
        - User Controller
      parameters:
        - name: activationCode
          in: path
          required: true
          description: The activation code sent to the user's email.
          schema:
            type: string
      responses:
        '302':
          description: Redirect to the book catalogue page.

  /user/{id}/favorites:
    get:
      summary: Get User's Favorite Books
      description: Retrieve a list of favorite books for the specified user.
      tags:
        - User Controller
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: integer
      responses:
        '200':
          description: Successful response with a list of favorite books.
          content:
            text/html:
              schema:
                type: string
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the book.
        title:
          type: string
        titleForDisplay:
          type: string
          minLength: 3
          maxLength: 120
        genre:
          type: string
          minLength: 1
          maxLength: 50
        author:
          type: string
        year:
          type: integer
        imageCover:
          type: string
          description: URL or path of the book cover image.
    User:
      type: object
      properties:
        id:
          type: integer

        username:
          type: string
          description: The username of the user
        password:
          type: string
          description: The password for the user
        email:
          type: string
          description: The email of the user
        activationCode:
          type: string
        activated:
          type: boolean
        profileImage:
          type: string